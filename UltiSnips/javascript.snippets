#
#  React snippets
#

snippet ush "Use State Hook" b
const [${1}, ${2}] = useState(${3});$0
endsnippet
 
snippet ufh "Use Effect Hook" b
useEffect(() => {
	${1}
});$0
endsnippet
 
snippet ch "Custom Hook" b
function use${1}(${2}) {
	const [${3}, ${4}] = useState(${5});
	
  useEffect(() => {
  	${6}
	});
}$0                                                                                                                                                                           
endsnippet

snippet cdm "Component did mount" b
componentDidMount() {
	${1}
}$0
endsnippet

snippet cdup "Component did update" b
componentDidUpdate(prevProps, prevState) {
	${1}
}$0
endsnippet

snippet cwm "Component will mount" b
componentWillMount() {
	${1}
}$0
endsnippet

snippet cwr "Component will receive props" b
componentWillReceiveProps(nextProps) {
	${1}
}$0
endsnippet

snippet cwun "Component will unmount" b
componentWillUnmount() {
	${1}
}$0
endsnippet

snippet cwu "Component will update" b
componentWillUpdate(nextProps, nextState) {
	${1}
}$0
endsnippet

snippet fup "Force update"
forceUpdate(${1:callback})
endsnippet

snippet gdp "Get default props" b
getDefaultProps() {
	return {
		${1}
	}
}$0
endsnippet

snippet gis "Get initial state" b
getInitialState() {
	return {
		${1}: ${2}
	}
}$0
endsnippet

snippet ism "Is mounted"
isMounted()
endsnippet

snippet jsx "Define jsx dom" b
/**
 * @jsx React.DOM
 */

import React from 'react';

let ${2:ClassName} = React.createClass({

render() {
	return (
		${VISUAL}$4
	);
}

});
$0
${3:module.exports = $2;}
endsnippet

snippet pt "propTypes" b
propTypes: {
	${1}: React.PropTypes.${2:string}
}
endsnippet

snippet rcc "React.createClass" b
let ${1:ClassName} = React.createClass({

render() {
	return (
		${VISUAL}$2
	)
}

})
$0
endsnippet

snippet rcx "Extends React.Component" b
class ${1:ClassName} extends React.Component {
	render(){
		return (
			$2
		)
	}
}
endsnippet

snippet ren "render"
render() {
	return (
		${1:<div />}
	)
}$0
endsnippet

snippet sst "Set state" b
this.setState({
	${1}: ${2}
})$0
endsnippet

snippet scu "Should component update"
shouldComponentUpdate(nextProps, nextState) {
	${1}
}$0
endsnippet

snippet props "Get property" i
this.props.${1}
endsnippet

snippet state "Get state" i
this.state.${1}
endsnippet

snippet trp "Transfer props to"
this.transferPropsTo(${VISUAL}$0)
endsnippet

# This snippet will only works if the keyword 'con' is the first word of line
snippet con "Constructor for React.Component" b
constructor(props, context) {
	super(props, context)

	this.state = {
		$1: $2
	}
}$0

endsnippet
